venn[1,2]
venn[2,1]
members_with_NA_groups
groups
venn<- data.frame(V1 = venn$id,
stri_split_fixed(venn$group, ",",  simplify = TRUE))
venn
venn[1,8]
venn
venn[2,3]
venn[1,1]
venn[1,2]
venn[2,2]
venn[2,3]
venn[[2]]
venn<- members_with_NA_groups %>% group_by(id) %>% summarise_all(funs(trimws(paste(., collapse = ','))))
venn
venn[8,2]
length(venn[8,2])
venn<- data.frame(V1 = venn$id,stri_split_fixed(venn$group, ",",  simplify = TRUE))
length(venn[8,2])
venn[8,2]
venn
length(venn[8,])
length(venn[8,]-1)
length(venn[8,])-1
venn
length(venn[10,])-1
length(venn[10,])-1
venn[10,]
venn<- members_with_NA_groups %>% group_by(id) %>% summarise_all(funs(trimws(paste(., collapse = ','))))
venn
length(venn[10,])
length(venn[11,])
venn<- data.frame(V1 = venn$id,stri_split_fixed(venn$group, ",",  simplify = TRUE))
venn
annoation_graph
members_with_NA_groups
venn
venn
venn<- members_with_NA_groups %>% group_by(id) %>% summarise_all(funs(trimws(paste(., collapse = ','))))
venn
lengths(gregexpr(",", d)) + 1
lengths(gregexpr(",", venn))
venn
lengths(gregexpr(",", venn)) + 1
lengths(gregexpr(",")) + 1
count.fields(textConnection(venn), sep = ",")
count.fields((venn), sep = ",")
count.fields(textConnection(venn), sep = ",")
count.fields(venn, sep = ",")
count.fields("venn", sep = ",")
v2 <- as.numeric(unlist(stri_split(venn,fixed=',')))
v2
venn
stri_split
v2 <- as.numeric(stri_split(venn,fixed=','))
v2
v2 <- as.numeric(unlist(stri_split(venn,fixed=',')))
v2 <- as.numeric(unlist(stri_split(venn$group,fixed=',')))
v2
v2 <- as.numeric(stri_split(venn$group,fixed=','))
v2
v2 <- as.numeric(unlist((venn$group,fixed=',')))
v2 <- as.numeric(unlist(venn$group,fixed=','))
venn<- as.numeric(data.frame(V1 = venn$id,stri_split_fixed(venn$group, ",",  simplify = TRUE)))
venn
venn<- members_with_NA_groups %>% group_by(id) %>% summarise_all(funs(trimws(paste(., collapse = ','))))
v2 <- as.numeric(unlist(stri_split(venn$group,fixed=',')))
v2
venn<- data.frame(V1 = venn$id,stri_split_fixed(venn$group, ",",  simplify = TRUE))
venn
venn<- members_with_NA_groups %>% group_by(id) %>% summarise_all(funs(trimws(paste(., collapse = ','))))
as.numeric(venn$group)
a<-as.numeric(venn$group)
a
a<-as.numeric(venn[2,2])
a
venn
v2 <- as.numeric(unlist(stri_split(venn[2,2],fixed=',')))
v2
v2 <- as.numeric(unlist(stri_split(venn[1,2],fixed=',')))
v2
v2 <- as.numeric(unlist(stri_split(venn[8,2],fixed=',')))
v2
v2 <- unlist(stri_split(venn[8,2],fixed=','))
v2
venn
v2 <- unlist(stri_split(venn[8,2],fixed=','))
v2
v2<-
venn<- data.frame(V1 = venn$id,stri_split_fixed(venn$group, ",",  simplify = TRUE))
v2 <- unlist(stri_split(venn[8,2],fixed=','))
v2
venn<- members_with_NA_groups %>% group_by(id) %>% summarise_all(funs(trimws(paste(., collapse = ','))))
v2 <- unlist(stri_split(venn[8,2],fixed=','))
v2
length(v2)
venn<- members_with_NA_groups %>% group_by(id) %>% summarise_all(funs(trimws(paste(., collapse = ','))))
venn
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
venn
for(i in length(venn$id)){
v2 <- unlist(stri_split(venn[i,2],fixed=','))
area1<- length(v2)
print(area1)
print("---")
print(node1)
print("****")
print(v2)
}
v2
v2 <- unlist(stri_split(venn[1,2],fixed=','))
v2
v2 <- unlist(stri_split(venn[8,2],fixed=','))
v2
runApp()
node1
node1<- "ATM"
venn_i<- inner_join(node1, venn[i])
venn_i<- merge(node1, venn[i])
venn_i
node1
venn[1]
venn[1,1]
venn[,1]
venn
venn[1]
venn[1,]
venn_i<- merge(node1, venn[1,])
venn_i
venn_i <- data.frame(venn_i$id, venn_i$group)
venn_i
runApp()
v2 <- unlist(stri_split(venn_i[,2],fixed=','))
v2
area1<- length(venn_i)
area1
v2
v2 <- unlist(stri_split(venn[,2],fixed=','))
v2 <- unlist(stri_split(venn,fixed=','))
v2
v2 <- unlist(stri_split(venn[,2],fixed=','))
v2
v2 <- unlist(stri_split(venn[8,2],fixed=','))
length(v2)
v2
venn_i
runApp()
runApp()
venn_i
v2 <- unlist(stri_split(venn_i,fixed=','))
v2
length(v2)
v2 <- unlist(stri_split(venn_i[,2],fixed=','))
v2
length(v2)
v2 <- unlist(stri_split(venn_i[8,2],fixed=','))
v2
runApp()
node1<- MDM2
node1<- "MDM2"
node1
venn[8,
]
venn_i<- merge(node1, venn[8,])
venn_i
venn_i <- data.frame(venn_i$id, venn_i$group)
venn_i
v2 <- unlist(stri_split(venn_i[,2],fixed=','))
v2
print(length(v2))
venn[node1]
venn[node1,]
venn
which(venn %in% node1)
venn
node1
which(node1 %in% venn)
node1
which(node1 %in% venn$id)
venn[which(node1 %in% venn$id)]
venn[which(node1 %in% venn$id)]
which(venn$id==node1)
# venn_i<- merge(node1, venn[i,])
# venn_i <- data.frame(venn_i$id, venn_i$group)
v2 <- unlist(stri_split(venn_i[which(venn$id==node1),2],fixed=','))
v2
# venn_i<- merge(node1, venn[i,])
# venn_i <- data.frame(venn_i$id, venn_i$group)
v2 <- unlist(stri_split(which(venn$id==node1),2,fixed=','))
v2
venn[venn_i,2]
venn_i<-which(venn$id==node1)
venn
venn[venn_i,2]
# venn_i<- merge(node1, venn[i,])
# venn_i <- data.frame(venn_i$id, venn_i$group)
v2 <- unlist(stri_split(venn[venn_i,2],fixed=','))
v2
area1<-length(v2)
area1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
venn
venn_i<-which(venn$id==node2)
node2
node2<- "ATM"
venn_i<-which(venn$id==node2)
venn_i
v2 <- unlist(stri_split(venn[venn_i,2],fixed=','))
area2<-length(v2)
area2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
venn
g<- read.delim("Examples/string_interactions.txt")
annoation_graph <- read.delim("Examples/string_interactions_groups_comma_duplicate.txt", header = F)
annoation_graph
annoation_graph <- as.data.frame(annoation_graph)
groups <- annoation_graph
groups
groups
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length(which(v1 %in% v2) %in% v3)
v1= c(a,b,c,d)
v1= c(1,2,3,4)
v2=c(2,4,7,9)
v3=(1,2,6,7)
v3=(1,2,6,7)
v3=c(1,2,6,7)
v1
v2
v3
length(which(v1 %in% v2) %in% v3)
which(v1 %in% v2) %in% v3
which(v1 %in% v2 %in% v3)
a<- which(v1 %in% v2)
a
which(a %in% v3)
# print(area1)
# print("1")
# print(area2)
# print("2")
# print(v1)
# print("3")
# print(v2)
# print("4")
# print(length(which(v1 %in% v2)))
v12<-length(which(v1 %in% v2))
v23<- length(which(v2 %in% v3))
v13<- length(which(v1 %in% v3))
v123<- length(which(v12 %in% v3))
v12
v23
v13
v123
runApp()
runApp()
runApp()
runApp()
v12
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
length_of_gaps<- c("-","-","-")
empty_length<- length(which(length_of_gaps %in% "-"))
empty_length
runApp()
runApp()
length_of_gaps<- c("-","-","-")
empty_length<- length(which(length_of_gaps %in% "-"))
print(empty_length)
empty_length<- which(length_of_gaps %in% "-")
print(empty_length)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<- paste("a", union("b"))
a<- paste("a", union(b))
a<- paste("a", union())
a<-c(1,2,3)
b<- c(2,3,4)
paste(a, union(b))
text(0.5,0.5,expression(paste("A",union(B))))
text(0.5,0.5,expression(paste("A",union(B))))
plot.new()
text(0.5,0.5,expression(paste("A",union(B))))
df <- cbind(input$node_1, input$node_2, plot.new() text(0.5,0.5,expression(paste(input$node_1,union(input$node_2)))))
df <- cbind(input$node_1, input$node_2, text(0.5,0.5,expression(paste(input$node_1,union(input$node_2)))))
df <- cbind(a, b, text(0.5,0.5,expression(paste(input$node_1,union(input$node_2)))))
df <- cbind(a, b, text(0.5,0.5,expression(paste(input$node_1,union(input$node_2)))))
df
df
df <- cbind(a, b, text(0.5,0.5,expression(paste(input$node_1,union(input$node_2)))))
df <- cbind(a, b, text(0.5,0.5,expression(paste(input$node_1,union(input$node_2)))))
plot.new()
df <- cbind(a, b, text(0.5,0.5,expression(paste(input$node_1,union(input$node_2)))))
df <- cbind(a, b, paste(input$node_1,as.symbol(union(input$node_2))))
df <- cbind(a, b, paste(a,as.symbol(union(b))))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
