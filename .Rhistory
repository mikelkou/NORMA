# Can also set the label and select items
updateSelectInput(session, "inSelect2",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
selectInput("inSelect2", "Select input 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inSelect
print(x)
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect2",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
updateSelectInput(session, "inSelect1",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
selectInput("inSelect2", "Select input 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inSelect
y <- input$inSelec2
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can use character(0) to remove all choices
if (is.null(y))
y <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect2",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
updateSelectInput(session, "inSelect1",
choices = c("Item A", "Item B", "Item C"),
selected = tail(y, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
selectInput("inSelect2", "Select input 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inSelect
y <- input$inSelect2
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can use character(0) to remove all choices
if (is.null(y))
y <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect2",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
updateSelectInput(session, "inSelect1",
choices = c("Item A", "Item B", "Item C"),
selected = tail(y, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
selectInput("inSelect2", "Select input 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inSelect
y <- input$inSelect2
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can use character(0) to remove all choices
if (is.null(y))
y <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect2",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
updateSelectInput(session, "inSelect",
choices = c("Item A", "Item B", "Item C"),
selected = tail(y, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
selectInput("inSelect2", "Select input 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inSelect
y <- input$inSelect2
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can use character(0) to remove all choices
if (is.null(y))
y <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect2",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
)
server <- function(input, output, session) {
observe({
x <- input$inSelect
y <- input$inSelect
print(x)
print(y)
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect2",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
runApp()
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
tabsetPanel(
tabPanel("1",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
),
tabPanel("2",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
))
server <- function(input, output, session) {
observe({
x <- input$inSelect
y <- input$inSelect
print(x)
print(y)
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect2",
choices = c("Item A", "Item B", "Item C"),
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
tabsetPanel(
tabPanel("1",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
uiOutput("a")
),
tabPanel("2",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
uiOutput("b")
)
))
server <- function(input, output, session) {
output$a<- textOutput({
paste("hi")
})
output$b<- textOutput({
paste("hello")
})
# observe({
#   x <- input$inSelect
#
#
#   # Can use character(0) to remove all choices
#   if (is.null(x))
#     x <- character(0)
#
#   # Can also set the label and select items
#   updateSelectInput(session, "inSelect2",
#                     choices = c("Item A", "Item B", "Item C"),
#                     selected = tail(x, 1)
#   )
#
#
# })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
tabsetPanel(
tabPanel("1",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
uiOutput("a")
),
tabPanel("2",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
uiOutput("b")
)
))
server <- function(input, output, session) {
output$a<- textOutput({
x<-input$inSelect
paste(x)
})
output$b<- textOutput({
x<-input$inSelect
paste(x)
})
# observe({
#   x <- input$inSelect
#
#
#   # Can use character(0) to remove all choices
#   if (is.null(x))
#     x <- character(0)
#
#   # Can also set the label and select items
#   updateSelectInput(session, "inSelect2",
#                     choices = c("Item A", "Item B", "Item C"),
#                     selected = tail(x, 1)
#   )
#
#
# })
}
shinyApp(ui, server)
}
runApp()
# output$a<- textOutput({
#   x<-input$inSelect
#   paste(x)
#
# })
#
# output$b<- textOutput({
#   x<-input$inSelect
#   paste(x)
# })
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
tabsetPanel(
tabPanel("1",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
uiOutput("a")
),
tabPanel("2",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
uiOutput("b")
)
))
server <- function(input, output, session) {
# output$a<- textOutput({
#   x<-input$inSelect
#   paste(x)
#
# })
#
# output$b<- textOutput({
#   x<-input$inSelect
#   paste(x)
# })
# observe({
#   x <- input$inSelect
#
#
#   # Can use character(0) to remove all choices
#   if (is.null(x))
#     x <- character(0)
#
#   # Can also set the label and select items
#   updateSelectInput(session, "inSelect2",
#                     choices = c("Item A", "Item B", "Item C"),
#                     selected = tail(x, 1)
#   )
#
#
# })
}
shinyApp(ui, server)
}
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
tabsetPanel(
tabPanel("1",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
uiOutput("a")
),
tabPanel("2",
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C")),
uiOutput("b")
)
))
server <- function(input, output, session) {
# output$a<- textOutput({
#   x<-input$inSelect
#   paste(x)
#
# })
#
# output$b<- textOutput({
#   x<-input$inSelect
#   paste(x)
# })
# observe({
#   x <- input$inSelect
#
#
#   # Can use character(0) to remove all choices
#   if (is.null(x))
#     x <- character(0)
#
#   # Can also set the label and select items
#   updateSelectInput(session, "inSelect2",
#                     choices = c("Item A", "Item B", "Item C"),
#                     selected = tail(x, 1)
#   )
#
#
# })
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fetch
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
