runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mod(71,70)
mod(1,70)
mod(2,70)
runApp()
runApp()
mod(3,70)
mod(73,70)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Example-1
network_file<-"C:\\Users\\mikae\\Desktop\\MSc_Molecular_Biomedicine\\Master_Thesis_Pavlopoulos\\Application_note_2\\App\\string_interactions.txt"
GO_file<-"C:\\Users\\mikae\\Desktop\\MSc_Molecular_Biomedicine\\Master_Thesis_Pavlopoulos\\Application_note_2\\App\\string_interactions_groups_comma_duplicate.txt"
expression<-read.delim("string_expression_colors.txt", header = F)
expression
colnames(expression) <- c("id", "color")
expression
express_order<- as.data.frame(members_with_NA_groups)
express_order
my_network<- read.delim(network_file, header= T)
m<- as.matrix(my_network) # coerces the data set as a matrix
g=graph.edgelist(m,directed=FALSE) # turns the edgelist into a 'graph object'
groups<- read.delim(GO_file, header= F, sep = "\t", na.strings=c("","NA")) #replace spaces with NAs
groups<- data.frame(V1 = groups$V1,
stri_split_fixed(groups$V2, ",",
simplify = TRUE))
groups<-mutate_all(groups, funs(na_if(.,"")))
number_of_groups<-dim(groups)[1]
x <- list()
for (i in 1:number_of_groups) {
group_i<- groups[i,]
group_i<- group_i[,-1]
group_i <- group_i[!is.na(group_i)]
x[[i]]<- (group_i)
}
GO <- list()
for (i in 1:number_of_groups) {
GO[[i]]<-rep(groups[i,1], length(x[[i]]))
}
column1<-my_network$from
column2<-my_network$to
node_names<-unique(union(column1, column2))
node_names
tt<-unlist(x)
nodes_with_NA_groups<-setdiff(node_names,tt)
nodes_with_NA_groups
members <- data_frame(id=unlist(x),group = unlist(GO))
members_with_NA_groups <- data_frame(id=unlist(x),group = unlist(GO))
members
if(length(nodes_with_NA_groups)>0){
for (i in 1:length(nodes_with_NA_groups))
{
#print(nodes_with_NA_groups[i])
members_with_NA_groups[nrow(members_with_NA_groups)+1,1] <- nodes_with_NA_groups[i]
}
members_with_NA_groups<-unique(members_with_NA_groups)
}
edge <- data_frame(from = my_network$from, to = my_network$to, group = NA) #edge --> not edges
members
members_with_NA_groups
within_group_edges <- members %>%
split(.$group) %>%
map_dfr(function (grp) {
if(length(grp$id)>=2){
id2id <- combn(grp$id, 2)
data_frame(from = id2id[1,],
to = id2id[2,],
group = unique(grp$group))
}
})
group_ids <- lapply(members_with_NA_groups %>% split(.$group), function(grp) { grp$id })
group_ids
#############################################################
virt_group_nodes <- length(members_with_NA_groups$id) + 1:number_of_groups
names(virt_group_nodes) <- c(letters[1:number_of_groups])
edges_virt <- data_frame(from = edge$from, to = edge$to, weight = 5, group = edge$group)
within_virt <- members %>% split(.$group) %>% map_dfr(function (grp) {
group_name <- unique(grp$group)
virt_from <- rep(virt_group_nodes[group_name], length(grp$id))
if(length(grp$id)>=2){
id2id <- combn(grp$id, 2)
data_frame(
from = c(id2id[1,], virt_from),
to = c(id2id[2,], grp$id),            # also connects from virtual_from node to each group node
weight = c(rep(0.1, ncol(id2id)),     # weight between group nodes
rep(50, length(grp$id))),
to_be_deleted = c(rep(T, ncol(id2id)),     # weight between group nodes
rep(T, length(grp$id))), # weight that 'ties together' the group (via the virtual group node)
group = group_name
)
}
})
edges_virt <-bind_rows(mutate_all(edges_virt, as.character), mutate_all(within_virt, as.character)) # vgazei 38,39,40
virt_group_na <- virt_group_nodes[is.na(names(virt_group_nodes))]
non_group_nodes <- (members_with_NA_groups %>% filter(is.na(group)))$id
# non_group_nodes
# virt_group_na
# #edges_na_group_virt <- data_frame(from = non_group_nodes,
#                                   to = rep(virt_group_na,
#                                            length(non_group_nodes)),
#                                   weight = 10,
#                                   group = NA)
#edges_virt <-bind_rows(mutate_all(edges_virt, as.character), mutate_all(edges_na_group_virt, as.character))
nodes_virt <- data_frame(id = 1:(length(members_with_NA_groups$id) + length(virt_group_nodes)),
is_virt = c(rep(FALSE, length(members_with_NA_groups$id)),
rep(TRUE, length(virt_group_nodes))))
nodes_virt[1:length(members_with_NA_groups$id),]<- paste(members_with_NA_groups$id) #replace with the right names from our network
nodes_virt<- unique(nodes_virt)
edges_virt
nodes_virt
g_virt <- graph_from_data_frame(edges_virt,
directed = FALSE,
vertices = nodes_virt)
# use "auto layout"
lay <- layout_nicely(g_virt)
lay_fr <- layout.fruchterman.reingold(g_virt)
lay_auto <- layout.auto(g_virt)
lay_drl <- layout.drl(g_virt)
# remove virtual group nodes from graph
g_virt <- delete_vertices(g_virt,which(nodes_virt$is_virt == T ))
# remove virtual group nodes' positions from the layout matrix
tmp<-which(nodes_virt$is_virt == T )
lay <- lay[-tmp, ]
g_virt=delete.edges(g_virt, which(E(g_virt)$to_be_deleted==T))
express_order<- as.data.frame(members_with_NA_groups)
express_order
express_order<- as.data.frame(unique(express_order$id))
express_order
colnames(express_order) <- "id"
expression
expression<-inner_join(express_order, expression, by = "id")
expression
members_with_NA_groups
express_order
express_order
expression<-left_join(express_order, expression, by = "id")
expression
expression$color<- as.character(expression$color)
expression
expression$color[which(expression$color=="blue")] <- "0"
expression$color[which(expression$color=="orange")] <- "2"
expression$color[which(expression$color=="green")] <- "4"
expression$color[which(expression$color=="red")] <- "6"
expression$color[which(expression$color=="purple")] <- "8"
expression$color[which(expression$color=="gray")] <- "15"
if(is.na(expression$color)){
expression$color[which(expression$color=="NA")] <- "15"
}
expression
expression<-read.delim("string_expression_colors.txt", header = F)
# expression<-read.delim("string_expression_colors.txt", header = F)
expression<-fetchFirstSelectedStoredExpression()
colnames(expression) <- c("id", "color")
expression
express_order<- as.data.frame(members_with_NA_groups)
express_order
express_order<- as.data.frame(unique(express_order$id))
express_order
colnames(express_order) <- "id"
express_order
expression<-left_join(express_order, expression, by = "id")
expression
expression$color<- as.character(expression$color)
expression
is.na(expression$color
)
which(is.na(expression$color)
)
expression$color<- as.character(expression$color)
expression$color[which(expression$color=="blue")] <- "0"
expression$color[which(expression$color=="orange")] <- "2"
expression$color[which(expression$color=="green")] <- "4"
expression$color[which(expression$color=="red")] <- "6"
expression$color[which(expression$color=="purple")] <- "8"
expression$color[which(expression$color=="gray")] <- "15"
if(is.na(expression$color)){
expression$color[which(is.na(expression$color))] <- "15"
}
print(expression)
expression
expression$color[which(is.na(expression$color))]
which(is.na(expression$color))
is.na(expression$color)
which(is.na(expression$color))==T
expression$color[which(is.na(expression$color))] <- "15"
expression
expression<-read.delim("string_expression_colors.txt", header = F)
colnames(expression) <- c("id", "color")
express_order<- as.data.frame(members_with_NA_groups)
express_order<- as.data.frame(unique(express_order$id))
colnames(express_order) <- "id"
expression<-left_join(express_order, expression, by = "id")
expression
expression$color<- as.character(expression$color)
expression$color[which(expression$color=="blue")] <- "0"
expression$color[which(expression$color=="orange")] <- "2"
expression$color[which(expression$color=="green")] <- "4"
expression$color[which(expression$color=="red")] <- "6"
expression$color[which(expression$color=="purple")] <- "8"
expression$color[which(expression$color=="gray")] <- "15"
expression$color[which(is.na(expression$color))] <- "15"
expression
runApp()
runApp()
expressions_pies<-read.delim("string_expression_colors.txt", header = F)
# expressions_pies<-read.delim("string_expression_colors.txt", header = F)
expressions_pies<-fetchFirstSelectedStoredExpression()
expressions_pies
colnames(expressions_pies) <- c("id", "color")
express_order<- as.data.frame(members_with_NA_groups)
express_order
network_file<-"C:\\Users\\mikae\\Desktop\\MSc_Molecular_Biomedicine\\Master_Thesis_Pavlopoulos\\Application_note_2\\App\\string_interactions.txt"
GO_file<-"C:\\Users\\mikae\\Desktop\\MSc_Molecular_Biomedicine\\Master_Thesis_Pavlopoulos\\Application_note_2\\App\\string_interactions_groups_comma_duplicate.txt"
#Example-2
#network_file<-"PAP_example.txt"
#GO_file<-"PAP_david.txt" #without spaces between annotation's words
#Example-3
#network_file<-"PAP_example.txt"
#GO_file<-"PAP_david_tmp.txt" #with spaces between annotation's words
#choose_file
#network_file<- choose.files()
#GO_file<- choose.files()
my_network<- read.delim(network_file, header= T)
m<- as.matrix(my_network) # coerces the data set as a matrix
g=graph.edgelist(m,directed=FALSE) # turns the edgelist into a 'graph object'
groups<- read.delim(GO_file, header= F, sep = "\t", na.strings=c("","NA")) #replace spaces with NAs
groups<- data.frame(V1 = groups$V1,
stri_split_fixed(groups$V2, ",",
simplify = TRUE))
groups<-mutate_all(groups, funs(na_if(.,"")))
number_of_groups<-dim(groups)[1]
x <- list()
for (i in 1:number_of_groups) {
group_i<- groups[i,]
group_i<- group_i[,-1]
group_i <- group_i[!is.na(group_i)]
x[[i]]<- (group_i)
}
GO <- list()
for (i in 1:number_of_groups) {
GO[[i]]<-rep(groups[i,1], length(x[[i]]))
}
column1<-my_network$from
column2<-my_network$to
node_names<-unique(union(column1, column2))
node_names
tt<-unlist(x)
nodes_with_NA_groups<-setdiff(node_names,tt)
nodes_with_NA_groups
members <- data_frame(id=unlist(x),group = unlist(GO))
members_with_NA_groups <- data_frame(id=unlist(x),group = unlist(GO))
members
if(length(nodes_with_NA_groups)>0){
for (i in 1:length(nodes_with_NA_groups))
{
#print(nodes_with_NA_groups[i])
members_with_NA_groups[nrow(members_with_NA_groups)+1,1] <- nodes_with_NA_groups[i]
}
members_with_NA_groups<-unique(members_with_NA_groups)
}
edge <- data_frame(from = my_network$from, to = my_network$to, group = NA) #edge --> not edges
members
members_with_NA_groups
within_group_edges <- members %>%
split(.$group) %>%
map_dfr(function (grp) {
if(length(grp$id)>=2){
id2id <- combn(grp$id, 2)
data_frame(from = id2id[1,],
to = id2id[2,],
group = unique(grp$group))
}
})
group_ids <- lapply(members_with_NA_groups %>% split(.$group), function(grp) { grp$id })
group_ids
#############################################################
virt_group_nodes <- length(members_with_NA_groups$id) + 1:number_of_groups
names(virt_group_nodes) <- c(letters[1:number_of_groups])
edges_virt <- data_frame(from = edge$from, to = edge$to, weight = 5, group = edge$group)
within_virt <- members %>% split(.$group) %>% map_dfr(function (grp) {
group_name <- unique(grp$group)
virt_from <- rep(virt_group_nodes[group_name], length(grp$id))
if(length(grp$id)>=2){
id2id <- combn(grp$id, 2)
data_frame(
from = c(id2id[1,], virt_from),
to = c(id2id[2,], grp$id),            # also connects from virtual_from node to each group node
weight = c(rep(0.1, ncol(id2id)),     # weight between group nodes
rep(50, length(grp$id))),
to_be_deleted = c(rep(T, ncol(id2id)),     # weight between group nodes
rep(T, length(grp$id))), # weight that 'ties together' the group (via the virtual group node)
group = group_name
)
}
})
edges_virt <-bind_rows(mutate_all(edges_virt, as.character), mutate_all(within_virt, as.character)) # vgazei 38,39,40
virt_group_na <- virt_group_nodes[is.na(names(virt_group_nodes))]
non_group_nodes <- (members_with_NA_groups %>% filter(is.na(group)))$id
# non_group_nodes
# virt_group_na
# #edges_na_group_virt <- data_frame(from = non_group_nodes,
#                                   to = rep(virt_group_na,
#                                            length(non_group_nodes)),
#                                   weight = 10,
#                                   group = NA)
#edges_virt <-bind_rows(mutate_all(edges_virt, as.character), mutate_all(edges_na_group_virt, as.character))
nodes_virt <- data_frame(id = 1:(length(members_with_NA_groups$id) + length(virt_group_nodes)),
is_virt = c(rep(FALSE, length(members_with_NA_groups$id)),
rep(TRUE, length(virt_group_nodes))))
nodes_virt[1:length(members_with_NA_groups$id),]<- paste(members_with_NA_groups$id) #replace with the right names from our network
nodes_virt<- unique(nodes_virt)
edges_virt
nodes_virt
g_virt <- graph_from_data_frame(edges_virt,
directed = FALSE,
vertices = nodes_virt)
# use "auto layout"
lay <- layout_nicely(g_virt)
lay_fr <- layout.fruchterman.reingold(g_virt)
lay_auto <- layout.auto(g_virt)
lay_drl <- layout.drl(g_virt)
# remove virtual group nodes from graph
g_virt <- delete_vertices(g_virt,which(nodes_virt$is_virt == T ))
# remove virtual group nodes' positions from the layout matrix
tmp<-which(nodes_virt$is_virt == T )
lay <- lay[-tmp, ]
g_virt=delete.edges(g_virt, which(E(g_virt)$to_be_deleted==T))
colnames(expressions_pies) <- c("id", "color")
express_order<- as.data.frame(members_with_NA_groups)
express_order<- as.data.frame(unique(express_order$id))
express_order
colnames(express_order) <- "id"
expressions_pies<-left_join(express_order, expressions_pies, by = "id")
expressions_pies
expressions_pies$color<- as.character(expressions_pies$color)
expressions_pies$color[which(expressions_pies$color=="blue")] <- "0"
expressions_pies$color[which(expressions_pies$color=="orange")] <- "2"
expressions_pies$color[which(expressions_pies$color=="green")] <- "4"
expressions_pies$color[which(expressions_pies$color=="red")] <- "6"
expressions_pies$color[which(expressions_pies$color=="purple")] <- "8"
expressions_pies$color[which(expressions_pies$color=="gray")] <- "15"
expressions_pies$color[which(is.na(expression$color))] <- "15"
expressions_pies
expressions_pies<-left_join(express_order, expressions_pies, by = "id")
expressions_pies$color<- as.character(expressions_pies$color)
expressions_pies$color[which(expressions_pies$color=="blue")] <- "0"
expressions_pies$color[which(expressions_pies$color=="orange")] <- "2"
expressions_pies$color[which(expressions_pies$color=="green")] <- "4"
expressions_pies$color[which(expressions_pies$color=="red")] <- "6"
expressions_pies$color[which(expressions_pies$color=="purple")] <- "8"
expressions_pies$color[which(expressions_pies$color=="gray")] <- "15"
expressions_pies$color[which(is.na(expressions_pies$color))] <- "15"
expressions_pies
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<- c(1,2,3)
a(1)
a[1]
a[4]
a[1:3]
qual_col_pals<-c("#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02","#A6761D","#666666","#7FC97F","#BEAED4","#FDC086","#FFFF99","#386CB0","#F0027F","#BF5B17","#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A",
"#B15928","#FBB4AE","#B3CDE3","#CCEBC5","#DECBE4","#FED9A6","#FFFFCC","#E5D8BD","#FDDAEC","#F2F2F2","#B3E2CD","#FDCDAC","#CBD5E8",
"#F4CAE4","#E6F5C9","#FFF2AE","#F1E2CC","#CCCCCC","#E41A1C","#377EB8","#4DAF4A","#984EA3","#FFFF33","#A65628","#F781BF","#999999",
"#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854","#FFD92F","#E5C494","#B3B3B3","#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3",
"#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#095F02","#E31A97","#A81AD2","#74ED33","#38F76B","#E607E1","#17D214","#E2E749",
"#5522DF","#1FF696","#1406E9","#6A43DE","#C2F309","#E92D57","#5004DE","#9C4AE9","#2EF613","#EDAA2D","#2FB5EA","#47FAB2","#CC9221",
"#5C4AFC","#E843D0","#FE3F64","#21DD3A","#1988D2","#BC11EF","#EEFB3D","#1B9E77","#D95F02","#7570B3",
"#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02","#A6761D","#666666","#7FC97F","#BEAED4","#FDC086","#FFFF99","#386CB0",
"#F0027F","#BF5B17","#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A","#B15928",
"#FBB4AE","#B3CDE3","#CCEBC5","#DECBE4","#FED9A6","#FFFFCC","#E5D8BD","#FDDAEC","#F2F2F2","#B3E2CD","#FDCDAC","#CBD5E8","#F4CAE4",
"#E6F5C9","#FFF2AE","#F1E2CC","#CCCCCC","#E41A1C","#377EB8","#4DAF4A","#984EA3","#FFFF33","#A65628","#F781BF","#999999","#66C2A5",
"#FC8D62","#8DA0CB","#E78AC3","#A6D854","#FFD92F","#E5C494","#B3B3B3","#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3","#FDB462",
"#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#095F02","#E31A97","#A81AD2","#74ED33","#38F76B","#E607E1","#17D214","#E2E749","#5522DF",
"#1FF696","#1406E9","#6A43DE","#C2F309","#E92D57","#5004DE","#9C4AE9","#2EF613","#EDAA2D","#2FB5EA","#47FAB2","#CC9221","#5C4AFC",
"#E843D0","#FE3F64","#21DD3A","#1988D2","#BC11EF","#EEFB3D","#1B9E77","#D95F02","#7570B3",
"#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02","#A6761D","#666666","#7FC97F","#BEAED4","#FDC086","#FFFF99","#386CB0",
"#F0027F","#BF5B17","#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A","#B15928",
"#FBB4AE","#B3CDE3","#CCEBC5","#DECBE4","#FED9A6","#FFFFCC","#E5D8BD","#FDDAEC","#F2F2F2","#B3E2CD","#FDCDAC","#CBD5E8","#F4CAE4",
"#E6F5C9","#FFF2AE","#F1E2CC","#CCCCCC","#E41A1C","#377EB8","#4DAF4A","#984EA3","#FFFF33","#A65628","#F781BF","#999999","#66C2A5",
"#FC8D62","#8DA0CB","#E78AC3","#A6D854","#FFD92F","#E5C494","#B3B3B3","#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3","#FDB462",
"#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#095F02","#E31A97","#A81AD2","#74ED33","#38F76B","#E607E1","#17D214","#E2E749","#5522DF",
"#1FF696","#1406E9","#6A43DE","#C2F309","#E92D57","#5004DE","#9C4AE9","#2EF613","#EDAA2D","#2FB5EA","#47FAB2","#CC9221","#5C4AFC",
"#E843D0","#FE3F64","#21DD3A","#1988D2","#BC11EF","#EEFB3D","#1B9E77","#D95F02","#7570B3")
group_pal_rows<- function(n){
qual_col_pals[1:300]
#             <-c("#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02","#A6761D","#666666","#7FC97F","#BEAED4","#FDC086","#FFFF99","#386CB0","#F0027F","#BF5B17","#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A",
# "#B15928","#FBB4AE","#B3CDE3","#CCEBC5","#DECBE4","#FED9A6","#FFFFCC","#E5D8BD","#FDDAEC","#F2F2F2","#B3E2CD","#FDCDAC","#CBD5E8",
# "#F4CAE4","#E6F5C9","#FFF2AE","#F1E2CC","#CCCCCC","#E41A1C","#377EB8","#4DAF4A","#984EA3","#FFFF33","#A65628","#F781BF","#999999",
# "#66C2A5","#FC8D62","#8DA0CB","#E78AC3","#A6D854","#FFD92F","#E5C494","#B3B3B3","#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3",
# "#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#095F02","#E31A97","#A81AD2","#74ED33","#38F76B","#E607E1","#17D214","#E2E749",
# "#5522DF","#1FF696","#1406E9","#6A43DE","#C2F309","#E92D57","#5004DE","#9C4AE9","#2EF613","#EDAA2D","#2FB5EA","#47FAB2","#CC9221",
# "#5C4AFC","#E843D0","#FE3F64","#21DD3A","#1988D2","#BC11EF","#EEFB3D","#1B9E77","#D95F02","#7570B3",
# "#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02","#A6761D","#666666","#7FC97F","#BEAED4","#FDC086","#FFFF99","#386CB0",
# "#F0027F","#BF5B17","#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A","#B15928",
# "#FBB4AE","#B3CDE3","#CCEBC5","#DECBE4","#FED9A6","#FFFFCC","#E5D8BD","#FDDAEC","#F2F2F2","#B3E2CD","#FDCDAC","#CBD5E8","#F4CAE4",
# "#E6F5C9","#FFF2AE","#F1E2CC","#CCCCCC","#E41A1C","#377EB8","#4DAF4A","#984EA3","#FFFF33","#A65628","#F781BF","#999999","#66C2A5",
# "#FC8D62","#8DA0CB","#E78AC3","#A6D854","#FFD92F","#E5C494","#B3B3B3","#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3","#FDB462",
# "#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#095F02","#E31A97","#A81AD2","#74ED33","#38F76B","#E607E1","#17D214","#E2E749","#5522DF",
# "#1FF696","#1406E9","#6A43DE","#C2F309","#E92D57","#5004DE","#9C4AE9","#2EF613","#EDAA2D","#2FB5EA","#47FAB2","#CC9221","#5C4AFC",
# "#E843D0","#FE3F64","#21DD3A","#1988D2","#BC11EF","#EEFB3D","#1B9E77","#D95F02","#7570B3",
# "#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02","#A6761D","#666666","#7FC97F","#BEAED4","#FDC086","#FFFF99","#386CB0",
# "#F0027F","#BF5B17","#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A","#B15928",
# "#FBB4AE","#B3CDE3","#CCEBC5","#DECBE4","#FED9A6","#FFFFCC","#E5D8BD","#FDDAEC","#F2F2F2","#B3E2CD","#FDCDAC","#CBD5E8","#F4CAE4",
# "#E6F5C9","#FFF2AE","#F1E2CC","#CCCCCC","#E41A1C","#377EB8","#4DAF4A","#984EA3","#FFFF33","#A65628","#F781BF","#999999","#66C2A5",
# "#FC8D62","#8DA0CB","#E78AC3","#A6D854","#FFD92F","#E5C494","#B3B3B3","#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3","#FDB462",
# "#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#095F02","#E31A97","#A81AD2","#74ED33","#38F76B","#E607E1","#17D214","#E2E749","#5522DF",
# "#1FF696","#1406E9","#6A43DE","#C2F309","#E92D57","#5004DE","#9C4AE9","#2EF613","#EDAA2D","#2FB5EA","#47FAB2","#CC9221","#5C4AFC",
# "#E843D0","#FE3F64","#21DD3A","#1988D2","#BC11EF","#EEFB3D","#1B9E77","#D95F02","#7570B3")
#
if(n>=300){
qual_col_pals<-c(qual_col_pals, rep(c("grey50"), times = (n-300) ))
nn<-  qual_col_pals[1:n]
nnames<-c(nn)
}
else
{
nn<-  qual_col_pals[1:n]
nnames<-c(nn)
}
}
group_pal_rows(3)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
members_with_NA_groups
runApp()
runApp()
members_with_NA_groups
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
