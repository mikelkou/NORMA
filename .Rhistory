Groupss[9]
runApp()
length(Groupss[[j]])
runApp()
runApp()
runApp()
length(Groupss[[j]])
j
j in 1:nrowannot
runApp()
runApp()
runApp()
Groupss[[j]]
length(Groupss[[j]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# print(groupss)
# length(groups[,1])
# print(nrowannot)
Groupss <- strsplit(groupss[, 2], ",")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x<-c(3,2,4,5,67,8)
x[1]
x[2]
x[3]
x[[3]]
x <- list()
x[[1]] <- c(-0.438185, -0.766791, 0.695282)
x[[2]] <- c(-0.759100, 0.034400)
x[1,1]
x[1][1]
x[[1][1]]
x[[1,1]]
x[[1]]
x[[1]][1]
x[1][1]
x[[1]][1]
length(x[[1]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mems_with_zeros<- members_with_NA_groups[is.na(members_with_NA_groups)] <- 0
network_file<-"C:\\Users\\mikae\\Desktop\\MSc_Molecular_Biomedicine\\Master_Thesis_Pavlopoulos\\Application_note_2\\App\\string_interactions.txt"
GO_file<-"C:\\Users\\mikae\\Desktop\\MSc_Molecular_Biomedicine\\Master_Thesis_Pavlopoulos\\Application_note_2\\App\\string_interactions_groups_comma_duplicate.txt"
#Example-2
#network_file<-"PAP_example.txt"
#GO_file<-"PAP_david.txt" #without spaces between annotation's words
#Example-3
#network_file<-"PAP_example.txt"
#GO_file<-"PAP_david_tmp.txt" #with spaces between annotation's words
#choose_file
#network_file<- choose.files()
#GO_file<- choose.files()
my_network<- read.delim(network_file, header= T)
m<- as.matrix(my_network) # coerces the data set as a matrix
g=graph.edgelist(m,directed=FALSE) # turns the edgelist into a 'graph object'
groups<- read.delim(GO_file, header= F, sep = "\t", na.strings=c("","NA")) #replace spaces with NAs
groups<- data.frame(V1 = groups$V1,
stri_split_fixed(groups$V2, ",",
simplify = TRUE))
groups<-mutate_all(groups, funs(na_if(.,"")))
number_of_groups<-dim(groups)[1]
x <- list()
for (i in 1:number_of_groups) {
group_i<- groups[i,]
group_i<- group_i[,-1]
group_i <- group_i[!is.na(group_i)]
x[[i]]<- (group_i)
}
GO <- list()
for (i in 1:number_of_groups) {
GO[[i]]<-rep(groups[i,1], length(x[[i]]))
}
column1<-my_network$from
column2<-my_network$to
node_names<-unique(union(column1, column2))
node_names
tt<-unlist(x)
nodes_with_NA_groups<-setdiff(node_names,tt)
nodes_with_NA_groups
members <- data_frame(id=unlist(x),group = unlist(GO))
members_with_NA_groups <- data_frame(id=unlist(x),group = unlist(GO))
members
if(length(nodes_with_NA_groups)>0){
for (i in 1:length(nodes_with_NA_groups))
{
#print(nodes_with_NA_groups[i])
members_with_NA_groups[nrow(members_with_NA_groups)+1,1] <- nodes_with_NA_groups[i]
}
members_with_NA_groups<-unique(members_with_NA_groups)
}
edge <- data_frame(from = my_network$from, to = my_network$to, group = NA) #edge --> not edges
members
members_with_NA_groups
within_group_edges <- members %>%
split(.$group) %>%
map_dfr(function (grp) {
if(length(grp$id)>=2){
id2id <- combn(grp$id, 2)
data_frame(from = id2id[1,],
to = id2id[2,],
group = unique(grp$group))
}
})
# group_ids <- lapply(members_with_NA_groups %>% split(.$group), function(grp) { grp$id })
# group_ids
group_order<-(as.list(unique(members_with_NA_groups$group)))
EE <- new.env(hash = TRUE)
for(i in 1: length(group_order))
{
group_name_as_key<-group_order[[i]]
EE[[ as.character(group_name_as_key) ]]<-i
}
for(i in 1: length(group_order))
{
group_name_as_key<-group_order[[i]]
index<-EE[[ as.character(group_name_as_key) ]]
}
group_ids_tmp <- lapply(members_with_NA_groups %>% split(.$group), function(grp) { grp$id })
group_ids<-c()
for(i in 1: length(group_ids_tmp))
{
group_name_as_key<-names(group_ids_tmp[i])
index<-EE[[group_name_as_key]]
group_ids<-c(group_ids, group_ids_tmp[index])
}
####################################
#############################################################
virt_group_nodes <- length(members_with_NA_groups$id) + 1:number_of_groups
names(virt_group_nodes) <- c(letters[1:number_of_groups])
edges_virt <- data_frame(from = edge$from, to = edge$to, weight = 5, group = edge$group)
within_virt <- members %>% split(.$group) %>% map_dfr(function (grp) {
group_name <- unique(grp$group)
virt_from <- rep(virt_group_nodes[group_name], length(grp$id))
if(length(grp$id)>=2){
id2id <- combn(grp$id, 2)
data_frame(
from = c(id2id[1,], virt_from),
to = c(id2id[2,], grp$id),            # also connects from virtual_from node to each group node
weight = c(rep(0.1, ncol(id2id)),     # weight between group nodes
rep(50, length(grp$id))),
to_be_deleted = c(rep(T, ncol(id2id)),     # weight between group nodes
rep(T, length(grp$id))), # weight that 'ties together' the group (via the virtual group node)
group = group_name
)
}
})
edges_virt <-bind_rows(mutate_all(edges_virt, as.character), mutate_all(within_virt, as.character)) # vgazei 38,39,40
virt_group_na <- virt_group_nodes[is.na(names(virt_group_nodes))]
non_group_nodes <- (members_with_NA_groups %>% filter(is.na(group)))$id
# non_group_nodes
# virt_group_na
# #edges_na_group_virt <- data_frame(from = non_group_nodes,
#                                   to = rep(virt_group_na,
#                                            length(non_group_nodes)),
#                                   weight = 10,
#                                   group = NA)
#edges_virt <-bind_rows(mutate_all(edges_virt, as.character), mutate_all(edges_na_group_virt, as.character))
nodes_virt <- data_frame(id = 1:(length(members_with_NA_groups$id) + length(virt_group_nodes)),
is_virt = c(rep(FALSE, length(members_with_NA_groups$id)),
rep(TRUE, length(virt_group_nodes))))
nodes_virt[1:length(members_with_NA_groups$id),]<- paste(members_with_NA_groups$id) #replace with the right names from our network
nodes_virt<- unique(nodes_virt)
edges_virt
nodes_virt
g_virt <- graph_from_data_frame(edges_virt,
directed = FALSE,
vertices = nodes_virt)
# use "auto layout"
lay <- layout_nicely(g)
# print(lay)
# lay <- layout_choices()
#  layout_nicely(g_virt)
# lay <- layout_(g_virt, with_fr(), normalize())
# remove virtual group nodes from graph
g_virt <- delete_vertices(g_virt,which(nodes_virt$is_virt == T ))
# remove virtual group nodes' positions from the layout matrix
tmp<-which(nodes_virt$is_virt == T )
lay <- lay[-tmp, ]
g_virt=delete.edges(g_vi
print(members_with_NA_groups)
members_with_NA_groups
members_with_NA_groups[is.na(members_with_NA_groups)] <- 0
members_with_NA_groups
mems_with_zeros<- members_with_NA_groups[is.na(members_with_NA_groups)] <- 0
mems_with_zeros<- as.data.frame(members_with_NA_groups)
mems_with_zeros
mems_with_zeros<- as.matrix(members_with_NA_groups)
mems_with_zeros
mems_with_zeros[is.na(mems_with_zeros)] <- 0
mems_with_zeros
members_with_zeros<- as.matrix(members_with_NA_groups)
members_with_zeros[is.na(members_with_zeros)] <- 0
groupss <- members_with_zeros %>%
group_by(id) %>%
summarise_all(funs(trimws(paste(., collapse = ','))))
members_with_zeros<- as.data.frame(members_with_zeros)
members_with_zeros
groupss <- members_with_zeros %>%
group_by(id) %>%
summarise_all(funs(trimws(paste(., collapse = ','))))
groupss
groupss <- inner_join(members_with_zeros, groupss, by = "id")
# groupss<- na.omit(groupss)
print(groupss)
print("ppp")
groupss <-data.frame(groupss[,1],groupss[,3])
groupss<-groupss[!duplicated(groupss$id), ]
groupss <- as.data.frame(groupss)
Groupss <- strsplit(groupss[, 2], ",")
print(groupss)
groupss <- members_with_zeros %>%
group_by(id) %>%
summarise_all(funs(trimws(paste(., collapse = ','))))
groupss <- inner_join(members_with_zeros, groupss, by = "id")
# groupss<- na.omit(groupss)
print(groupss)
groupss <-data.frame(groupss[,1],groupss[,3])
groupss
groupss<-groupss[!duplicated(groupss$id), ]
groupss
groupss <- members_with_zeros %>%
group_by(id) %>%
summarise_all(funs(trimws(paste(., collapse = ','))))
groupss <- inner_join(members_with_zeros, groupss, by = "id")
# groupss<- na.omit(groupss)
print(groupss)
print("ppp")
groupss <-data.frame(groupss[,1],groupss[,3])
groupss
groupss[,1]
groupss<-groupss[!duplicated(groupss[,1]), ]
groupss
groupss <- as.data.frame(groupss)
groupss
Groupss <- strsplit(groupss[, 2], ",")
Groupss
colnames(groupss)<- (V1, V2)
colnames(groupss)<- (V1)(V2)
groupss
colnames(groupss)<- c("V1", "V2")
groupss
Groupss <- strsplit(groupss[, 2], ",")$V2
Groupss
# groupss <- as.data.frame(groupss)
groups<- as.matrix(groupss)
Groupss <- strsplit(groupss[, 2], ",")$V2
groupss <- as.data.frame(groupss)
Groupss <- strsplit(groupss[, 2], ",")$V2
groupss
vector_groups<- groupss[,2]
vector_groups
Groupss <- strsplit(vector_groups, ",")
groupss_as_char<- as.character(groupss$V2)
groupss_as_char
Groupss <- strsplit(groupss_as_char, ",")
Groupss
runApp()
runApp()
runApp()
length(Groupss[[i]])=="0"
)
Groupss
Groupss[[11]])=="0"
Groupss[[11]]=="0"
runApp()
runApp()
Groupss[[10]]!="0"
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
exists("0")
is.null(groupss$V2)
is.null(groupss$V2[1:11])
groupss
groupss$V2==0
a<- groupss$V2==0
a
if(a==T)
}
length(a==T)
a==T
a
length(a)
a=T
a<- groupss$V2==0
a==T
which(T % a)
which(TRUE % a)
which(TRUE %% a)
sum(a, na.rm = TRUE)
length(a)
1:sum(a, na.rm = TRUE)
vector_0<- groupss$V2==0
length_vector_0<- sum(a, na.rm = TRUE)
length_vector_0
vector_0
sum(a, na.rm = F)
length_vector_0<- sum(a, na.rm = FALSE)
length_vector_0
vector_0<- groupss$V2==0
vector_0
vector_0<- groupss$V2!=0
length_vector_0<- sum(a, na.rm = TRUE)
length_vector_0
vector_0
vector_0<- groupss$V2==0
length_vector_0<- sum(vector_0, na.rm = TRUE)
length_vector_0
vector_0<- groupss$V2!=0
length_vector_0<- sum(vector_0, na.rm = TRUE)
length_vector_0
vector_0<- groupss$V2==0
length_vector_0<- sum(vector_0, na.rm = TRUE)
vector_zero<- groupss$V2==0
length_vector_zero<- sum(vector_zero, na.rm = TRUE)
length_vector_zero!=0
a<- cat(sprintf("#cccccc,"), file = fileConn)
rep(a, length_vector_zero)
qual_col_pals[i]-length_vector_zero
qual_col_pals<-c("#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02","#A6761D",
"#666666","#7FC97F","#BEAED4","#FDC086","#FFFF99","#386CB0","#F0027F","#BF5B17","#A6CEE3","#1F78B4",
"#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A","#B15928","#FBB4AE","#B3CDE3",
"#CCEBC5","#DECBE4","#FED9A6","#FFFFCC","#E5D8BD","#FDDAEC","#F2F2F2","#B3E2CD","#FDCDAC","#CBD5E8","#F4CAE4","#E6F5C9",
"#FFF2AE","#F1E2CC","#CCCCCC","#E41A1C","#377EB8","#4DAF4A","#984EA3","#FFFF33","#A65628","#F781BF","#999999","#66C2A5",
"#FC8D62","#8DA0CB","#E78AC3","#A6D854","#FFD92F","#E5C494","#B3B3B3","#8DD3C7","#FFFFB3","#BEBADA","#FB8072","#80B1D3",
"#FDB462","#B3DE69","#FCCDE5","#D9D9D9","#BC80BD","#095F02")
qual_col_pals[5]-length_vector_zero
qual_col_pals[5]
qual_col_pals[1:5]
qual_col_pals[1:5]-length_vector_zero
length_vector_zero
qual_col_pals[2]-1
qual_col_pals[2]
qual_col_pals[1:5-length_vector_zero]
length_vector_zero
1:5
1:5-length_vector_zero
length_vector_zero
[1:5]-length_vector_zero
(1:5)-length_vector_zero
x <- length(3)-length_vector_zero
x
length_vector_zero
length(3)
x <- 3-length_vector_zero
x
x <- as.integer(3)-length_vector_zero
x
as.integer(i)
x <- as.integer(i)-length_vector_zero
x
i
nrowannot
qual_col_pals[1:5]
vector_zero
vector_zero<- groupss==0
vector_zero
length_vector_zero<- sum(vector_zero, na.rm = TRUE)
length_vector_zero
vector_zero<- groupss$V1==0
length_vector_zero<- sum(vector_zero, na.rm = TRUE)
length_vector_zero
runApp()
length_vector_zero
length_vector_zero
vector_zero<- groupss$V2==0
length_vector_zero<- sum(vector_zero, na.rm = TRUE)
length_vector_zero
class(length_vector_zero)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
0:i
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if(length_vector_zero!=0){
a<- cat(sprintf("\"#cccccc\","), file = fileConn)
rep(a, length_vector_zero)}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
