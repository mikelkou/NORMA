v2
v1 %in v2
(v1 %in% v2)
which(v1 %in% v2)
v1<- c(5,6,7)
v2<- c(5,7)
which(v1 %in% v2)
a<-(v1 %in% v2)
a
which(v1 %in% v2)
v1[which(v1 %in% v2)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
v1
v2
v1![which(v1 %in% v2)]
v1[!which(v1 %in% v2)]
v1[which(v1 %in% v2)]
!v1[which(v1 %in% v2)]
v2[which(v1 %in% v2)]
v2-[which(v1 %in% v2)]
v1[which(v1 %in% v2)]
v1
v1-[which(v1 %in% v2)]
v1-which(v1 %in% v2)
v1
v2
which(v1 %in% v2)==F
which(v1 %in% v2)
(v1 %in% v2)
(v1 %in% v2)==F
(v1 %in% v2)
v1 - v2
v2-v1
v1
is.element(v1)
is.element(el = 7, v1)
!is.element(el = v1 %in% v2, v1)
!is.element(el = v1 %in% v2, v2)
v1
v2
v1 %in%v2
which((v1%in%v2)==F)
v1[which((v1%in%v2)==F)]
v2[which((v1%in%v2)==F)]
v2[which((v2%in%v1)==F)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
g<- read.delim("Examples/string_interactions.txt")
g
g<- read.delim("Examples/string_interactions.txt")
my_network<- as.data.frame(get.edgelist(g))
graph_from_data_frame
my_network
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
my_network
my_network<- as.data.frame(get.edgelist(g))
g
g_without_virt<- graph.data.frame(g, vertices = NULL, directed = F)
g_without_virt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<- c(1,2,3)
a
tail(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nodes_with_NA_groups
layout.fruchterman.reingold(g)
layout.fruchterman.reingold(g_without_virt)
2*layout.fruchterman.reingold(g_without_virt)
layout.fruchterman.reingold(g_without_virt)
rbind(layout.fruchterman.reingold(g_without_virt),layout.fruchterman.reingold(g_without_virt))
rbind(rep(layout.fruchterman.reingold(g_without_virt),2))
rep(layout.fruchterman.reingold(g_without_virt),2)
layout.fruchterman.reingold(g_without_virt)
rep(layout.fruchterman.reingold(g_without_virt),2)
nodes_with_NA_groups<-2
rbind(rep(layout.fruchterman.reingold(g_without_virt),length(nodes_with_NA_groups)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lay<- rep(lay, 5)
graph_from_data
g<- (read.delim("Examples/string_interactions.txt"))
g<- graph.data.frame(g, vertices = NULL, directed = F)
convert_to_igraph <- function(dataset1)
({
# directed_tf <- FALSE
# if (attr(dataset1, "directed")) {
#     directed_tf <- attr(dataset1, "directed")
# }
igraph <-
graph.data.frame(dataset1, vertices = NULL, directed = F)
return(simplify(igraph))
})
g<- graph.data.frame(g, vertices = NULL, directed = F)
library(igraph)
g<- (read.delim("Examples/string_interactions.txt"))
g<- graph.data.frame(g, vertices = NULL, directed = F)
g
lay<- layout.fruchterman.reingold(g)
lay
lay<- rep(lay, 5)
lay
g<- graph.data.frame(g, vertices = NULL, directed = F)
shiny::runApp()
runApp()
lay[,1]
lay[,1]
lay
lay<- layout.fruchterman.reingold(g)
lay
lay[,1]
members_with_NA_groups
convexInput <- function(){
set.seed(123)
g <- fetchFirstSelectedStoredIgraph_annotations_tab()
if (is.null(g))
return()
my_network<- as.data.frame(get.edgelist(g))
my_network<- data.frame(from = my_network$V1, to = my_network$V2)
gName <- SelectedStoredNets()$name
annoation_graph <- fetchFirstSelectedStoredGroups2_annotations_tab()
if (is.null(annoation_graph))
return()
annotName <- SelectedStoredAnnots()$name
annoation_graph <- as.data.frame(annoation_graph)
groups<-annoation_graph
groups<- data.frame(V1 = groups$Annotations, stri_split_fixed(groups$Nodes, ",",  simplify = TRUE))
groups<-mutate_all(groups, funs(na_if(.,"")))
number_of_groups<-dim(groups)[1]
x <- list()
for (i in 1:number_of_groups) {
group_i<- groups[i,]
group_i<- group_i[,-1]
group_i <- group_i[!is.na(group_i)]
x[[i]]<- (group_i)
}
GO <- list()
for (i in 1:number_of_groups) {
GO[[i]]<-rep(groups[i,1], length(x[[i]]))
}
column1<-my_network$from
column2<-my_network$to
node_names<-unique(union(column1, column2))
tt<-unlist(x)
nodes_with_NA_groups<-setdiff(node_names,tt)
members <- data_frame(id=unlist(x),group = unlist(GO))
members_with_NA_groups <- data_frame(id=unlist(x),group = unlist(GO))
if(length(nodes_with_NA_groups)>0){
for (i in 1:length(nodes_with_NA_groups))
{
members_with_NA_groups[nrow(members_with_NA_groups)+1,1] <- nodes_with_NA_groups[i]
}
members_with_NA_groups<-unique(members_with_NA_groups)
}
edge <- data_frame(from = my_network$from, to = my_network$to, group = NA) #edge --> not edges
within_group_edges <- members %>%
split(.$group) %>%
map_dfr(function (grp) {
if(length(grp$id)>=2){
id2id <- combn(grp$id, 2)
data_frame(from = id2id[1,],
to = id2id[2,],
group = unique(grp$group))
}
})
#### sort by group as in file #####
group_order<-(as.list(unique(members_with_NA_groups$group)))
EE <- new.env(hash = TRUE)
EE_positions <- new.env(hash = TRUE)
for(i in 1: length(group_order))
{
group_name_as_key<-group_order[[i]]
EE[[ as.character(group_name_as_key) ]]<-i
EE_positions[[ as.character(i) ]]<-group_order[[i]]
}
for(i in 1: length(group_order))
{
group_name_as_key<-group_order[[i]]
index<-EE[[ as.character(group_name_as_key) ]]
}
group_ids_tmp <- lapply(members_with_NA_groups %>% split(.$group), function(grp) { grp$id })
group_ids<-c()
for(i in 1: length(group_ids_tmp))
{
group_ids<-c(group_ids, group_ids_tmp[ EE_positions[[ as.character(i) ]]])
}
virt_group_nodes <- length(members_with_NA_groups$id) + 1:number_of_groups
names(virt_group_nodes) <- c(letters[1:number_of_groups])
edges_virt <- data_frame(from = edge$from, to = edge$to, weight = 5, group = edge$group)
within_virt <- members %>% split(.$group) %>% map_dfr(function (grp) {
group_name <- unique(grp$group)
virt_from <- rep(virt_group_nodes[group_name], length(grp$id))
if(length(grp$id)>=2){
id2id <- combn(grp$id, 2)
data_frame(
from = c(id2id[1,], virt_from),
to = c(id2id[2,], grp$id),            # also connects from virtual_from node to each group node
weight = c(rep(0.1, ncol(id2id)),     # weight between group nodes
rep(50, length(grp$id))),
to_be_deleted = c(rep(T, ncol(id2id)),     # weight between group nodes
rep(T, length(grp$id))), # weight that 'ties together' the group (via the virtual group node)
group = group_name
)
}
})
edges_virt <-bind_rows(mutate_all(edges_virt, as.character), mutate_all(within_virt, as.character)) # vgazei 38,39,40
virt_group_na <- virt_group_nodes[is.na(names(virt_group_nodes))]
non_group_nodes <- (members_with_NA_groups %>% filter(is.na(group)))$id
nodes_virt <- data_frame(id = 1:(length(members_with_NA_groups$id) + length(virt_group_nodes)),
is_virt = c(rep(FALSE, length(members_with_NA_groups$id)),
rep(TRUE, length(virt_group_nodes))))
nodes_virt[1:length(members_with_NA_groups$id),]<- paste(members_with_NA_groups$id) #replace with the right names from our network
nodes_virt<- unique(nodes_virt)
g_virt <- graph_from_data_frame(edges_virt,
directed = FALSE,
vertices = nodes_virt)
# use "auto layout"
# lay2 <- layout_nicely(g_virt)
lay <- layout_choices(g_virt, lay)
# remove virtual group nodes from graph
g_virt <- delete_vertices(g_virt,which(nodes_virt$is_virt == T ))
# remove virtual group nodes' positions from the layout matrix
tmp<-which(nodes_virt$is_virt == T )
lay <- lay[-tmp, ]
print(lay)
return(lay)
}
members_with_NA_groups
runApp()
nodes<-11
length(nodes)
nodes<- c(1,2,3,4,5,6)
length(nodes)
lay
length(lay'')
length(lay)
rbind(lay,lay[length(nodes),]
)
a<-rbind(lay[,1],lay[length(nodes),])
a
a<-rbind(lay,lay[length(nodes),])
a
lay[length(nodes),]
lay[1:length(nodes),]
lay<-rbind(lay,lay[1:length(nodes),])
lay
runApp()
runApp()
runApp()
runApp()
runApp()
minx<-min(lay[,1])
minx
maxx<-max(lay[,1])
maxx
miny<-min(lay[,2])
maxy<-max(lay[,2])
for (i in 1:length(nodes)){
coor_x<-mapper(lay[i,1], minx, maxx, 100, 800)
coor_y<-mapper(lay[i,2], miny, maxy, 100, 800)
if(  (coor_x*slider_values)>max_pixels_panel | (coor_y*slider_values)>max_pixels_panel     )
{
allowed<-FALSE
break
}
}
for (i in 1:length(nodes)){
print(lay[i,1])
print("----")
coor_x<-mapper(lay[i,1], minx, maxx, 100, 800)
coor_y<-mapper(lay[i,2], miny, maxy, 100, 800)
if(  (coor_x*scaling_coordinates_convex())>max_pixels_panel | (coor_y*scaling_coordinates_convex())>max_pixels_panel     )
for (i in 1:length(nodes)){
print(lay[i,1])
print("----")
coor_x<-mapper(lay[i,1], minx, maxx, 100, 800)
coor_y<-mapper(lay[i,2], miny, maxy, 100, 800)
if(  (coor_x*scaling_coordinates_convex())>max_pixels_panel | (coor_y*scaling_coordinates_convex())>max_pixels_panel     )
{
zoom_slider<-FALSE
break
}
}
coor_x
)
coor_x
coor_y
lay[i,1]
minx
maxx
runApp()
runApp()
runApp()
runApp()
lay
which(lay[,1]>800)
(lay[,1]>800)
runApp()
runApp()
runApp()
runApp()
Browse[1]> alter
runApp()
runApp()
eq_along(nodes)
seq_along(nodes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
g
new_g<- get.edgelist(g)
new_g
column1, column2
new_g$V1
new_g
new_g<-unique(union(new_g[,1], new_g[,2]))
new_g
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a<-T
a==T
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x
x = data.table(c(1,2,2,2,3,4,4))
y = data.table(c(2,3,4,4,4,5))
fintersect(x, y)
x
y
fintersect(x, y)
funion(x, y)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyalert)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
